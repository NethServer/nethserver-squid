#
# 90squid
#
{
    use esmith::NetworksDB;
    use esmith::ConfigDB;
    use NethServer::Firewall;
    my $fw = new NethServer::Firewall();
    my $ndb = esmith::NetworksDB->open_ro();
    my $pdb = esmith::ConfigDB->open_ro('fwrules');
    my $status = $squid{'status'} || 'disabled';
    my $green_mode = $squid{'GreenMode'} || 'manual';
    my $blue_mode = $squid{'BlueMode'} || 'manual';
    my $block = $squid{'PortBlock'} || 'disabled';
    my $bypass_domain_list = '';
    foreach ($pdb->get_all_by_prop('type' => 'bypass-dst')) {
        my $status = $_->prop('status') || 'disabled';
        next if ($status eq 'disabled');
        my $domains = $_->prop('Domains') || next;
        $bypass_domain_list = '+squid-bypass';
        last;
    }
    
    my %zones;
    my @ips;
    my @interfaces;
    foreach my $i ($ndb->interfaces) {
        my $role = $i->prop('role') || '';
        my $ip = $i->prop('ipaddr') || '';
        my $bp = $i->prop('bootproto') || '';
        if ($ip ne '') {
            push(@ips,$ip);
        } else {
            if ($role eq 'red' && $bp eq 'dhcp') {
                push(@interfaces, "&".$i->key);
            }
        }

        next if ($role eq '' || $role eq 'red' || $role eq 'slave' || $role eq 'bridged' || $role eq 'alias' || $role eq 'pppoe');
        my $zone = substr($role, 0, 5); #truncate zone name to 5 chars
        if ($role eq 'green') { # rename green to loc
            $zone = 'loc';
        }
        $zones{$zone} = ''; # avoid duplicate policies
    }


    if ($status eq 'enabled') {
        my @bypass_src = ();
        my $bypass_src_str = '';
        my @bypass_dst = ();
        my $bypass_dst_str = '';
        push(@bypass_dst, @interfaces);
        push(@bypass_dst, @ips);
        if ($bypass_domain_list ne '') {
            push(@bypass_dst, $bypass_domain_list);
        }

        if ( $green_mode =~ /transparent/ || (defined($ndb->blue()) && $blue_mode =~ /transparent/) ) {

            foreach ($pdb->get_all_by_prop(type => 'bypass-src')) {
                my $status = $_->prop('status') || 'disabled';
                next if ($status eq 'disabled');
                my $host = $_->prop('Host') || next;
                my $address = $fw->getAddress($host) || next;
                push(@bypass_src,$address);
            }
            foreach ($pdb->get_all_by_prop(type => 'bypass-dst')) {
                my $status = $_->prop('status') || 'disabled';
                next if ($status eq 'disabled');
                my $host = $_->prop('Host') || next;
                my $address = $fw->getAddress($host) || next;
                push(@bypass_dst,$address);
            }

        }
        if (scalar(@bypass_src)>0) {
            $bypass_src_str = ":!".join(',',@bypass_src);
        } 
        if (scalar(@bypass_dst)>0) {
            $bypass_dst_str = "!".join(',',@bypass_dst);
        } 

        if ($green_mode =~ /transparent/) {
            $OUT.="#\n# Squid: accept HTTP/S traffic from/to firewall and green\n#\n";
            $OUT.="ACCEPT\t\$FW\tnet\ttcp\t80\n";
            $OUT.="ACCEPT\tloc\t\$FW\ttcp\t80\n";
            $OUT.="ACCEPT\tloc\t\$FW\ttcp\t443\n";

            $OUT .="?COMMENT transparent proxy on green for port 80\n";
            $OUT.="REDIRECT\tloc$bypass_src_str\t3129\ttcp\t80\t-\t$bypass_dst_str\n";
            if ($green_mode =~ /ssl/) {
                $OUT .="?COMMENT transparent proxy on green for port 443\n";
                $OUT.="REDIRECT\tloc$bypass_src_str\t3130\ttcp\t443\t-\t$bypass_dst_str\n";
            }

        }
        if (defined($ndb->blue()) && $blue_mode =~ /transparent/) {
            $OUT.="#\n# Squid: accept HTTP/S traffic from/to firewall and blue\n#\n";
            $OUT.="ACCEPT\t\$FW\tnet\ttcp\t80\n";
            $OUT.="ACCEPT\tblue\t\$FW\ttcp\t80\n";
            $OUT.="ACCEPT\tblue\t\$FW\ttcp\t443\n";

            my $ports = $squid{'TCPPorts'} || '';
            foreach( split(/,/,$ports) ) {
                $OUT.="ACCEPT\tblue\t\$FW\ttcp\t$_\n";
            }


            $OUT .="?COMMENT transparent proxy on blue for port 80\n";
            $OUT.="REDIRECT\tblue$bypass_src_str\t3129\ttcp\t80\t-\t$bypass_dst_str\n";
            if ($blue_mode =~ /ssl/) {
                $OUT .="?COMMENT transparent proxy on blue for port 443\n";
                $OUT.="REDIRECT\tblue$bypass_src_str\t3130\ttcp\t443\t-\t$bypass_dst_str\n";
            }
        }
    }

    if ($status eq 'enabled' && $block eq 'enabled') {
        # generate rules for all zones
        foreach my $z (keys %zones) {
            if ($z ne 'orang') {
                $OUT .= "#\n# Block HTTP/HTTPS from $z to net\n#\n";
                $OUT .="?COMMENT Proxy block HTTP/HTTPS ports\n";
                $OUT .= "REJECT $z\t\tnet\ttcp\t80,443\n";
            }
        }
   }

   if ($status eq 'enabled' && defined($ndb->blue())) {
       $OUT .= "\n#\n# Allow Squid access from blue\n#\n";
       $OUT .="?COMMENT Allow Squid access from blue\n";
       $OUT .= "ACCEPT\tblue\t\$FW\ttcp\t3128\n";
   }
    
}
